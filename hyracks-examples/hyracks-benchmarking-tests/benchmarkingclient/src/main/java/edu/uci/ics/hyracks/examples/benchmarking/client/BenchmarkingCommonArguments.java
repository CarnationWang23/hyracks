/*
 * Copyright 2009-2010 by The Regents of the University of California
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * you may obtain a copy of the License from
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.uci.ics.hyracks.examples.benchmarking.client;

import org.kohsuke.args4j.Option;

/**
 * @author jarodwen
 */
public class BenchmarkingCommonArguments {
    @Option(name = "-host", usage = "Hyracks Cluster Controller Host name", required = true)
    public String host;

    @Option(name = "-port", usage = "Hyracks Cluster Controller Port (default: 1099)", required = false)
    public int port = 1099;

    @Option(name = "-app", usage = "Hyracks Application name", required = true)
    public String app;

    @Option(name = "-in-node-splits", usage = "Comma separated list of nodes for the input. A node is <node-name>", required = true)
    public String inNodeSplits;

    @Option(name = "-out-node-splits", usage = "Comma separated list of nodes for the output", required = true)
    public String outNodeSplits;

    @Option(name = "-test-count", usage = "Number of runs for benchmarking")
    public int testCount = 3;

    @Option(name = "-data-size", usage = "Number of tuples to be generated", required = true)
    public int dataSize;

    @Option(name = "-tuple-length", usage = "The length of the string to be generated")
    public int tupleLength = 10;

    @Option(name = "-data-gen-fields", usage = "Number of fields to be generated")
    public int dataFields = 10;

    @Option(name = "-cardinality", usage = "The cardinality of the data generated")
    public double cardRatio = 0.8;

    @Option(name = "-frame-limit", usage = "Number of frames available for the sorter")
    public int frameLimit = 4095;

    @Option(name = "-key-fields", usage = "Key fields of the generated data, separated by comma", required = true)
    public String keyFields;

    @Option(name = "-data-gen-seed", usage = "Random seed for generating the data")
    public int randSeed = 20110422;

    @Option(name = "-data-repeatable", usage = "Whether the same data will be generated by several runs")
    public boolean repeatable = true;

    public String getArgumentNames() {
        return "host\t" + "port\t" + "app\t" + "inSplits\t" + "outSplits\t" + "testCnt\t" + "dataSize\t"
                + "tupleLength\t" + "fields\t" + "card\t" + "frames\t" + "keys\t" + "dataGenSeed\t" + "genRepeatable\t";
    }

    public String getArgumentValues() {
        return host + "\t" + port + "\t" + app + "\t" + inNodeSplits + "\t" + outNodeSplits + "\t" + testCount + "\t"
                + dataSize + "\t" + tupleLength + "\t" + dataFields + "\t" + cardRatio + "\t" + frameLimit + "\t"
                + keyFields + "\t" + randSeed + "\t" + repeatable + "\t";
    }
}
